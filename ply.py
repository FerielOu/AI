{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNce5QEf1tLMAz1XAiuCewa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FerielOu/AI/blob/main/ply.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#\n",
        "#\n",
        "#      0===============================0\n",
        "#      |    PLY files reader/writer    |\n",
        "#      0===============================0\n",
        "#\n",
        "#\n",
        "#------------------------------------------------------------------------------------------\n",
        "#\n",
        "#      function to read/write .ply files\n",
        "#\n",
        "#------------------------------------------------------------------------------------------\n",
        "#\n",
        "#      Hugues THOMAS - 10/02/2017\n",
        "#\n",
        "\n",
        "\n",
        "#------------------------------------------------------------------------------------------\n",
        "#\n",
        "#          Imports and global variables\n",
        "#      \\**********************************/\n",
        "#\n"
      ],
      "metadata": {
        "id": "KlEd1AsZJP3v"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "6gY6v41SI_KO"
      },
      "outputs": [],
      "source": [
        "# Basic libs\n",
        "import numpy as np\n",
        "import sys"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define PLY types\n",
        "ply_dtypes = dict([\n",
        "    (b'int8', 'i1'),\n",
        "    (b'char', 'i1'),\n",
        "    (b'uint8', 'u1'),\n",
        "    (b'uchar', 'b1'),\n",
        "    (b'uchar', 'u1'),\n",
        "    (b'int16', 'i2'),\n",
        "    (b'short', 'i2'),\n",
        "    (b'uint16', 'u2'),\n",
        "    (b'ushort', 'u2'),\n",
        "    (b'int32', 'i4'),\n",
        "    (b'int', 'i4'),\n",
        "    (b'uint32', 'u4'),\n",
        "    (b'uint', 'u4'),\n",
        "    (b'float32', 'f4'),\n",
        "    (b'float', 'f4'),\n",
        "    (b'float64', 'f8'),\n",
        "    (b'double', 'f8')\n",
        "])"
      ],
      "metadata": {
        "id": "vTojFrj-JEZG"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Numpy reader format\n",
        "valid_formats = {'ascii': '', 'binary_big_endian': '>',\n",
        "                 'binary_little_endian': '<'}\n"
      ],
      "metadata": {
        "id": "73yocowUJIT_"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#------------------------------------------------------------------------------------------\n",
        "#\n",
        "#           Functions\n",
        "#       \\***************/\n",
        "#\n",
        "\n",
        "def parse_header(plyfile, ext):\n",
        "\n",
        "    # Variables\n",
        "    line = []\n",
        "    properties = []\n",
        "    num_points = None\n",
        "\n",
        "    while b'end_header' not in line and line != b'':\n",
        "        line = plyfile.readline()\n",
        "        if b'element' in line:\n",
        "            line = line.split()\n",
        "            num_points = int(line[2])\n",
        "\n",
        "        elif b'property' in line:\n",
        "            line = line.split()\n",
        "            properties.append((line[2].decode(), ext + ply_dtypes[line[1]]))\n",
        "\n",
        "    return num_points, properties\n",
        "\n",
        "\n",
        "def read_ply(filename):\n",
        "    \"\"\"\n",
        "    Read \".ply\" files\n",
        "\n",
        "    Parameters\n",
        "    ----------\n",
        "    filename : string\n",
        "        the name of the file to read.\n",
        "\n",
        "    Returns\n",
        "    -------\n",
        "    result : array\n",
        "        data stored in the file\n",
        "\n",
        "    Examples\n",
        "    --------\n",
        "    Store data in file\n",
        "\n",
        "    >>> points = np.random.rand(5, 3)\n",
        "    >>> values = np.random.randint(2, size=10)\n",
        "    >>> write_ply('example.ply', [points, values], ['x', 'y', 'z', 'values'])\n",
        "\n",
        "    Read the file\n",
        "\n",
        "    >>> data = read_ply('example.ply')\n",
        "    >>> values = data['values']\n",
        "    array([0, 0, 1, 1, 0])\n",
        "\n",
        "    >>> points = np.vstack((data['x'], data['y'], data['z'])).T\n",
        "    array([[ 0.466  0.595  0.324]\n",
        "           [ 0.538  0.407  0.654]\n",
        "           [ 0.850  0.018  0.988]\n",
        "           [ 0.395  0.394  0.363]\n",
        "           [ 0.873  0.996  0.092]])\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    with open(filename, 'rb') as plyfile:\n",
        "        # Check if the file start with ply\n",
        "        if b'ply' not in plyfile.readline():\n",
        "            raise ValueError('The file does not start whith the word ply')\n",
        "\n",
        "        # get binary_little/big or ascii\n",
        "        fmt = plyfile.readline().split()[1].decode()\n",
        "        if fmt == \"ascii\":\n",
        "            raise ValueError('The file is not binary')\n",
        "\n",
        "        # get extension for building the numpy dtypes\n",
        "        ext = valid_formats[fmt]\n",
        "\n",
        "        # Parse header\n",
        "        num_points, properties = parse_header(plyfile, ext)\n",
        "\n",
        "        # Get data\n",
        "        data = np.fromfile(plyfile, dtype=properties, count=num_points)\n",
        "    return data\n",
        "\n",
        "\n",
        "def header_properties(field_list, field_names):\n",
        "\n",
        "    # List of lines to write\n",
        "    lines = []\n",
        "\n",
        "    # First line describing element vertex\n",
        "    lines.append('element vertex %d' % field_list[0].shape[0])\n",
        "\n",
        "    # Properties lines\n",
        "    i = 0\n",
        "    for fields in field_list:\n",
        "        for field in fields.T:\n",
        "            lines.append('property %s %s' % (field.dtype.name, field_names[i]))\n",
        "            i += 1\n",
        "\n",
        "    return lines\n",
        "\n",
        "\n",
        "def write_ply(filename, field_list, field_names):\n",
        "    \"\"\"\n",
        "    Write \".ply\" files\n",
        "\n",
        "    Parameters\n",
        "    ----------\n",
        "    filename : string\n",
        "        the name of the file to which the data is saved. A '.ply' extension will\n",
        "        be appended to the file name if it does no already have one.\n",
        "\n",
        "    field_list : list, tuple, numpy array\n",
        "        the fields to be saved in the ply file. Either a numpy array, a list of\n",
        "        numpy arrays or a tuple of numpy arrays. Each 1D numpy array and each\n",
        "        column of 2D numpy arrays are considered as one field.\n",
        "\n",
        "    field_names : list\n",
        "        the name of each fields as a list of strings. Has to be the same length\n",
        "        as the number of fields.\n",
        "\n",
        "    Examples\n",
        "    --------\n",
        "    >>> points = np.random.rand(10, 3)\n",
        "    >>> write_ply('example1.ply', points, ['x', 'y', 'z'])\n",
        "\n",
        "    >>> values = np.random.randint(2, size=10)\n",
        "    >>> write_ply('example2.ply', [points, values], ['x', 'y', 'z', 'values'])\n",
        "\n",
        "    >>> colors = np.random.randint(255, size=(10,3), dtype=np.uint8)\n",
        "    >>> field_names = ['x', 'y', 'z', 'red', 'green', 'blue', values']\n",
        "    >>> write_ply('example3.ply', [points, colors, values], field_names)\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    # Format list input to the right form\n",
        "    field_list = list(field_list) if (type(field_list) == list or type(field_list) == tuple) else list((field_list,))\n",
        "    for i, field in enumerate(field_list):\n",
        "        if field is None:\n",
        "            print('WRITE_PLY ERROR: a field is None')\n",
        "            return False\n",
        "        elif field.ndim > 2:\n",
        "            print('WRITE_PLY ERROR: a field have more than 2 dimensions')\n",
        "            return False\n",
        "        elif field.ndim < 2:\n",
        "            field_list[i] = field.reshape(-1, 1)\n",
        "\n",
        "    # check all fields have the same number of data\n",
        "    n_points = [field.shape[0] for field in field_list]\n",
        "    if not np.all(np.equal(n_points, n_points[0])):\n",
        "        print('wrong field dimensions')\n",
        "        return False\n",
        "\n",
        "    # Check if field_names and field_list have same nb of column\n",
        "    n_fields = np.sum([field.shape[1] for field in field_list])\n",
        "    if (n_fields != len(field_names)):\n",
        "        print('wrong number of field names')\n",
        "        return False\n",
        "\n",
        "    # Add extension if not there\n",
        "    if not filename.endswith('.ply'):\n",
        "        filename += '.ply'\n",
        "\n",
        "    # open in text mode to write the header\n",
        "    with open(filename, 'w') as plyfile:\n",
        "\n",
        "        # First magical word\n",
        "        header = ['ply']\n",
        "\n",
        "        # Encoding format\n",
        "        header.append('format binary_' + sys.byteorder + '_endian 1.0')\n",
        "\n",
        "        # Points properties description\n",
        "        header.extend(header_properties(field_list, field_names))\n",
        "\n",
        "        # End of header\n",
        "        header.append('end_header')\n",
        "\n",
        "        # Write all lines\n",
        "        for line in header:\n",
        "            plyfile.write(\"%s\\n\" % line)\n",
        "\n",
        "    # open in binary/append to use tofile\n",
        "    with open(filename, 'ab') as plyfile:\n",
        "\n",
        "        # Create a structured array\n",
        "        i = 0\n",
        "        type_list = []\n",
        "        for fields in field_list:\n",
        "            for field in fields.T:\n",
        "                type_list += [(field_names[i], field.dtype.str)]\n",
        "                i += 1\n",
        "        data = np.empty(field_list[0].shape[0], dtype=type_list)\n",
        "        i = 0\n",
        "        for fields in field_list:\n",
        "            for field in fields.T:\n",
        "                data[field_names[i]] = field\n",
        "                i += 1\n",
        "\n",
        "        data.tofile(plyfile)\n",
        "\n",
        "    return True\n",
        "\n",
        "\n",
        "def describe_element(name, df):\n",
        "    \"\"\" Takes the columns of the dataframe and builds a ply-like description\n",
        "\n",
        "    Parameters\n",
        "    ----------\n",
        "    name: str\n",
        "    df: pandas DataFrame\n",
        "\n",
        "    Returns\n",
        "    -------\n",
        "    element: list[str]\n",
        "    \"\"\"\n",
        "    property_formats = {'f': 'float', 'u': 'uchar', 'i': 'int'}\n",
        "    element = ['element ' + name + ' ' + str(len(df))]\n",
        "\n",
        "    if name == 'face':\n",
        "        element.append(\"property list uchar int points_indices\")\n",
        "\n",
        "    else:\n",
        "        for i in range(len(df.columns)):\n",
        "            # get first letter of dtype to infer format\n",
        "            f = property_formats[str(df.dtypes[i])[0]]\n",
        "            element.append('property ' + f + ' ' + df.columns.values[i])\n",
        "\n",
        "    return element"
      ],
      "metadata": {
        "id": "fmXsFFeuJMEG"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Y8ID_TzxJp_B"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}